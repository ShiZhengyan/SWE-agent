# Config for multi-device full finetuning in full_finetune_distributed.py
# using a Qwen3 0.6B model
#
# This config assumes that you've run the following command before launching
# this run:
#   tune download Qwen/Qwen3-0.6B --output-dir /tmp/Qwen3-0.6B
#
# To launch on 2 devices, run the following command from root:
#   tune run --nnodes 1 --nproc_per_node 2 full_finetune_distributed --config qwen3/0.6B_full
#
# You can add specific overrides through the command line. For example
# to override the checkpointer directory while launching training
# you can run:
#   tune run --nnodes 1 --nproc_per_node 2 full_finetune_distributed --config qwen3/0.6B_full checkpointer.checkpoint_dir=<YOUR_CHECKPOINT_DIR>
#
# This config works best when the model is being fine-tuned on 2+ GPUs.
# Single device full finetuning requires more memory optimizations. It's
# best to use 0.6B_full_single_device.yaml for those cases

exp_name: swe-agent-sft-distributed-placeholder
output_dir: llm-weights/final/${exp_name}

# Model Arguments
model:
  _component_: torchtune.models.qwen3.qwen3_0_6b_instruct

tokenizer:
  _component_: torchtune.models.qwen3.qwen3_tokenizer
  path: llm-weights/Qwen/Qwen3-0.6B/vocab.json
  merges_file: llm-weights/Qwen/Qwen3-0.6B/merges.txt
  max_seq_len: 32768

checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
  checkpoint_dir: llm-weights/Qwen/Qwen3-0.6B
  checkpoint_files: [
    model.safetensors,
  ]
  recipe_checkpoint: null
  output_dir: ${output_dir}
  model_type: QWEN3
  safe_serialization: True
resume_from_checkpoint: False
keep_last_n_checkpoints: 1

# Dataset and Sampler - Using AgentSFTDataset for enhanced metrics
dataset:
  _component_: torchtune.datasets.AgentSFTDataset
  source: json
  data_files: data/swe-smith-trajectories.jsonl
  split: train[:10%]
  conversation_column: messages
  conversation_style: openai
  train_on_input: False
  new_system_prompt: null
  packed: False  # True increases speed
  enable_token_classification: True  # Enable token classification for agent metrics
  train_on_tool_calls_only: False
  train_on_reasoning_only: False
  tool_call_start_token: "<function"
  tool_call_end_token: "</function>"

run_val_every_n_steps: 1
dataset_val:
  _component_: torchtune.datasets.AgentSFTDataset  
  source: json  
  data_files: data/swe-smith-trajectories.jsonl  
  split: train[99%:]
  conversation_column: messages  
  conversation_style: openai  
  train_on_input: False  
  new_system_prompt: null  
  packed: False   
  enable_token_classification: True  # Enable token classification for agent metrics
  train_on_tool_calls_only: False
  train_on_reasoning_only: False
  tool_call_start_token: "<function"
  tool_call_end_token: "</function>"

seed: 42
shuffle: True
batch_size: 1
batch_size_val: 1

# Optimizer and Scheduler
optimizer:
  _component_: torch.optim.AdamW
  fused: True
  weight_decay: 0.01
  lr: 5e-5
lr_scheduler:
  _component_: torchtune.training.lr_schedulers.get_cosine_schedule_with_warmup
  num_warmup_steps: 5
optimizer_in_bwd: False
loss:
  _component_: torchtune.modules.loss.CEWithChunkedOutputLoss
  # _component_: torchtune.modules.loss.LinearCrossEntropyLoss

# Training
epochs: 3
max_steps_per_epoch: null
gradient_accumulation_steps: 1 # Use to increase virtual batch size
compile: True  # pytorch compile, set to true for better perf/memory

# Logging
metric_logger:
  _component_: torchtune.training.metric_logging.WandBLogger
  project: devrl-sft
  group: ${exp_name}
  name: ${exp_name}
  job_type: agent_sft_distributed
log_every_n_steps: 1
log_peak_memory_stats: True
log_level: INFO

# Validation logging
log_val_loss: True

# Agent SFT specific configurations
enable_detailed_metrics: True  # Enable detailed metrics tracking
enable_token_classification: True  # Enable token classification
entropy_k: 10  # Number of top probabilities for entropy calculation
log_detailed_metrics_every_n_steps: 10  # Log detailed metrics every N steps

# Environment
device: cuda
dtype: bf16
enable_activation_checkpointing: True  # True reduces memory
enable_activation_offloading: False  # True reduces memory
# custom_sharded_layers: ['tok_embeddings']  # Layers to shard separately (useful for large vocab size models). Lower Memory, but lower speed.


# Show case the usage of pytorch profiler
# Set enabled to False as it's only needed for debugging training
profiler:
  _component_: torchtune.training.setup_torch_profiler

  enabled: False

  #Output directory of trace artifacts
  output_dir: ${output_dir}/profiling_outputs

  #`torch.profiler.ProfilerActivity` types to trace
  cpu: True
  cuda: True

  #trace options passed to `torch.profiler.profile`
  profile_memory: False
  with_stack: False
  record_shapes: True
  with_flops: False

  # `torch.profiler.schedule` options:
  # wait_steps -> wait, warmup_steps -> warmup, active_steps -> active, num_cycles -> repeat
  wait_steps: 5
  warmup_steps: 5
  active_steps: 2
  num_cycles: 1
